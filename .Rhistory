& loanDf$predictionUndecided > loanDf$predictionDenied] <- "Undecided"
# classification algorithm performance
table(loanDf$deny, loanDf$predictedLabels)
library(ggplot2)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio, colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PIratio") +
theme_bw() +
theme(text=element_text(family="Arial")) +
geom_line(data=(c(,)))
ggplot(data = loanDf,
aes(x = solvency, y = PIratio, colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PIratio") +
theme_bw() +
theme(text=element_text(family="Arial"))
View(weightsOptim)
View(X)
View(Y)
View(predictions)
View(weightsOptim)
b <- -weightsOptim[1,]
rep(1, 3)
A <- rbind(rep(1, 3), weightsOptim[1,])
View(A)
A <- rbind(rep(1, 3), weightsOptim[-1,])
View(A)
A <- rbind(rep(-1, 3), weightsOptim[-1,])
View(A)
solve(A, b)
A <- t(rbind(rep(-1, 3), weightsOptim[-1,]))
solve(A, b)
intersection <- solve(A, b)
View(loanDf)
lowpiont <- 0.9*min(loanDf$solvency)
lowsolvency <- 0.9*min(loanDf$solvency)
highsolvency <- 1.1*max(loanDf$solvency)
PIratio_ontheline <- function(solvency, weights1, weights2){
Pratio <- ((weights1$solvency-weights2$solvency)+weights1$ind-weights2$ind)/(weights2$PIratio-weights1$PIratio)
}
weightsOptim$targetApproved
weightsOptim[,"targetApproved"]
PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
w<-weightsOptim[,"targetApproved"]
w["solvency"]
PIratio_ontheline <- function(solvency, weights1, weights2){
Pratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"]/(weights2["PIratio"]-weights1["PIratio"])
}
PIratio_ontheline <- function(solvency, weights1, weights2){
Pratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"])/(weights2["PIratio"]-weights1["PIratio"])
}
PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
bh<-PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
bh
PIratio_ontheline <- function(solvency, weights1, weights2){
PIratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"])/(weights2["PIratio"]-weights1["PIratio"])
return PIratio
}
PIratio_ontheline <- function(solvency, weights1, weights2){
PIratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"])/(weights2["PIratio"]-weights1["PIratio"])
return PIratio
PIratio_ontheline <- function(solvency, weights1, weights2){
PIratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"])/(weights2["PIratio"]-weights1["PIratio"])
}
PIratio_ontheline <- function(solvency, weights1, weights2){
piratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"])/(weights2["PIratio"]-weights1["PIratio"])
}
bh<-PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
View(loanDf)
pilowsolvAD <- PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
pilowsolvAU <- PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetUndecided"])
pilowsolvDU <- PIratio_ontheline(lowsolvency, weightsOptim[,"targetDenied"], weightsOptim[,"targetUndecided"])
pihighsolvAD <- PIratio_ontheline(highsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
pihighsolvAU <- PIratio_ontheline(highsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetUndecided"])
pihighsolvDU <- PIratio_ontheline(highsolvency, weightsOptim[,"targetDenied"], weightsOptim[,"targetUndecided"])
pilowsolvAD
intersection
intersection["PIratio"]
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD) )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD) )
}
prediction <- function(solvency, PIratio, weights){
r <- weights["ind"]+weights["solvency"]*solvency+weights["PIratio"]*PIratio
}
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD) )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD) )
}
library(ggplot2)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio, colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PIratio") +
theme_bw() +
theme(text=element_text(family="Arial")) +
geom_line(data=boundaryDf1)
View(loanDf)
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD), deny=rep(2, "boundaryAD") )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD), deny=rep(2, "boundaryAD") )
}
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD), deny=rep(2, "boundaryAD") )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD), deny=rep(2, "boundaryAD") )
}
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD), deny=rep("boundaryAD",2) )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD), deny=rep("boundaryAD",2) )
}
library(ggplot2)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio, colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PIratio") +
theme_bw() +
theme(text=element_text(family="Arial")) +
geom_line(data=boundaryDf1)
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD), deny=rep("boundaryAD",2) )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD), deny=rep("boundaryAD",2) )
}
if( prediction(lowsolvency, pilowsolvAU, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAU, weightsOptim[,"targetDenied"])){
boundaryDf2 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAU), deny=rep("boundaryAU",2) )
} else {
boundaryDf2 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAU), deny=rep("boundaryAU",2) )
}
if( prediction(lowsolvency, pilowsolvDU, weightsOptim[,"targetDenied"]) > prediction(lowsolvency, pilowsolvDU, weightsOptim[,"targetApproved"])){
boundaryDf3 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvDU), deny=rep("boundaryDU",2) )
} else {
boundaryDf3 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvDU), deny=rep("boundaryDU",2) )
}
library(ggplot2)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio, colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PIratio") +
theme_bw() +
theme(text=element_text(family="Arial")) +
geom_line(data=boundaryDf1) +
geom_line(data=boundaryDf2) +
geom_line(data=boundaryDf3)
table(loanDf$deny, loanDf$predictedLabels)
lowPIratio <- 0.9*min(loanDf$PIratio)
highPIratio <- 1.1*max(loanDf$PIratio)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
install.packages("fractal")
install.packages("car")
library(car)
library(fractal)
library(tseries)
if (!require('devtools')) install.packages('devtools')
devtools::install_github("abarciauskas-bgse/bplmnist")
library(bplmnist)
library(randomForest)
?randomForest
?cable
?kable
library(knitr)
?kable
require(devtools)
install_github("hadley/productplots")
?prodplot
library(productplots)
?prodplot
library(ggplot2)
prodplot(happy, ~ happy, "hbar")
prodplot(happy, ~ sex + happy, c("vspine", "hbar"))
prodplot(happy, ~ sex + happy, stacked())
prodplot(happy, ~ happy + sex, c("hbar", "hbar"))
prodplot(happy, ~ happy + sex + health, c("hbar", "fluct"))
shiny::runApp('/media/balint/Storage/Tanulas/Data_Visualization/project/dv_shiny')
shiny::runApp('/media/balint/Storage/Tanulas/Data_Visualization/project/dv_shiny')
shiny::runApp('/media/balint/Storage/Tanulas/Data_Visualization/project/dv_shiny')
shiny::runApp('/media/balint/Storage/Tanulas/Data_Visualization/project/dv_shiny')
shiny::runApp('/media/balint/Storage/Tanulas/Data_Visualization/project/dv_shiny')
names(adat)
table(adat[,23])
adat <- adat[!is.na(adat[,117]), ]
table(adat[,23])
table(adat$X16.gyerekkor.orszag)
setwd("/media/balint/Storage/Tanulas/thesis/product-variety-optimisation")
master_test <- readRDS("master_test.RData")
master_train <- readRDS("master_train.RData")
library(data.table)
master_train_avg_product <- master_train[,.(avg_sales_by_product = mean(avg_sales_per_day)), by =.(productID)]
View(master_train_avg_product)
pred <- master_test[productID, testID]
pred <- master_test[c(productID, testID)]
pred <- master_test[,.(productID, testID)]
pred <- master_test[,.(productID, storeID)]
setkey(pred, c("productID", "storeID"))
View(pred)
keycols <- c("productID", "storeID")
setkey(pred, keycols)
names(pred)
setkey(master_train, keycols)
setkey(master_train, c("productID", "storeID"))
setkeyv(master_train, c("productID", "storeID"))
setkeyv(pred, c("productID", "storeID"))
pred <- merge(pred, master_train, all.x=TRUE)
View(pred)
pred <- merge(pred, master_train[, .(productID, storeID, avg_sales_per_day)], all.x=TRUE)
View(pred)
pred <- master_test[,.(productID, storeID)]
pred <- merge(pred, master_train[, .(productID, storeID, avg_sales_per_day)], all.x=TRUE)
setkeyv(pred, c("productID", "storeID"))
setkeyv(master_train, c("productID", "storeID"))
pred <- merge(pred, master_train[, .(productID, storeID, avg_sales_per_day)], all.x=TRUE)
View(master_train_avg_product)
setkey(master_train_avg_product, productID)
View(pred)
pred[avg_sales_per_day==NA,]
View(pred)
pred[avg_sales_per_day==0.70060976,]
pred[3:6,]
pred[avg_sales_per_day == 0.70060976,]
pred[avg_sales_per_day > 1,]
pred[avg_sales_per_day == NA,]
pred[is.na(avg_sales_per_day),]
pred[is.na(avg_sales_per_day),] <- merge(pred[is.na(avg_sales_per_day),], master_train_avg_product, all.x=TRUE)
setkey(pred, productID)
setkey(master_train_avg_product, productID)
pred[is.na(avg_sales_per_day),] <- merge(pred[is.na(avg_sales_per_day),], master_train_avg_product, all.x=TRUE)
master_train_avg_product <- master_train[,.(avg_sales_per_day = mean(avg_sales_per_day)), by =.(productID)]
pred <- master_test[,.(productID, storeID)]
pred$prediction <- master_train[,]
master_train_avg_product <- master_train[,.(avg_sales_per_day = mean(avg_sales_per_day)), by =.(productID)]
pred <- master_test[,.(productID, storeID)]
setkeyv(pred, c("productID", "storeID"))
)
library(data.table)
master_test <- readRDS("master_test.RData")
master_train <- readRDS("master_train.RData")
master_test <- readRDS("master_test.RData")
master_train <- readRDS("master_train.RData")
master_train_avg_product <- master_train[,.(avg_sales_by_product = mean(avg_sales_per_day)), by =.(productID)]
master_train_avg_product <- master_train[,.(avg_sales_per_day = mean(avg_sales_per_day)), by =.(productID)]
pred <- master_test[,.(productID, storeID)]
setkeyv(pred, c("productID", "storeID"))
setkeyv(master_train, c("productID", "storeID"))
pred <- merge(pred, master_train[, .(productID, storeID, avg_sales_per_day)], all.x=TRUE)
setkey(master_train_avg_product, productID)
setkey(pred, productID)
pred[is.na(avg_sales_per_day),] <- merge(pred[is.na(avg_sales_per_day),], master_train_avg_product, all.x=TRUE)
View(pred)
View(pred)
pred[is.na(avg_sales_per_day),]
a <- merge(pred[is.na(avg_sales_per_day),], master_train_avg_product, all.x=TRUE)
a <- pred[master_train_avg_product, nomatch=0]
setkey(master_train_avg_product, productID)
setkey(pred, productID)
a <- pred[master_train_avg_product, nomatch=0]
View(a)
pred[is.na(avg_sales_per_day),] <- merge(pred[is.na(avg_sales_per_day),], master_train_avg_product, all.x=TRUE)
View(pred)
pred[is.na(avg_sales_per_day),avg_sales_per_day]
pred[is.na(avg_sales_per_day),avg_sales_per_day]$productID
pred[is.na(avg_sales_per_day),avg_sales_per_day, productID]
pred[is.na(avg_sales_per_day), productID]
master_train_avg_product[productID==pred[is.na(avg_sales_per_day), productID],]
master_train_avg_product[productID=="G05F01S01S02",]
master_train_avg_product <- data.frame(master_train_avg_product)
master_train_avg_product[productID==pred[is.na(avg_sales_per_day), productID],]
master_train_avg_product[productID==pred[is.na(avg_sales_per_day), 1],]
master_train_avg_product[master_train_avg_productproductID==pred[is.na(avg_sales_per_day), productID],]
master_train_avg_product[master_train_avg_product$productID==pred[is.na(avg_sales_per_day), productID],]
master_train_avg_product[master_train_avg_product$productID==pred[is.na(avg_sales_per_day), 1],]
master_train_avg_product <- master_train[,.(avg_sales_per_day = mean(avg_sales_per_day)), by =.(productID)]
pred[is.na(avg_sales_per_day), productID]
a <- pred[is.na(avg_sales_per_day), productID][master_train_avg_product, nomatch=0]
prids <- pred[is.na(avg_sales_per_day), productID]
a <- prids[master_train_avg_product, nomatch=0]
prids <- data.table(productID = pred[is.na(avg_sales_per_day), productID])
a <- prids[master_train_avg_product, nomatch=0]
setkey(prids, productID)
a <- prids[master_train_avg_product, nomatch=0]
View(a)
a <- data.table(productID = pred[is.na(avg_sales_per_day), productID])[master_train_avg_product, nomatch=0]
a <- prids[master_train_avg_product, nomatch=0]
a[avg_sales_per_day]
View(a)
a[,avg_sales_per_day]
pred[is.na(avg_sales_per_day),avg_sales_per_day] <- a[,avg_sales_per_day]
pred[is.na(avg_sales_per_day),avg_sales_per_day]
pred <- data.frame(pred)
pred[is.na(avg_sales_per_day),avg_sales_per_day] <- a[,avg_sales_per_day]
pred[is.na(avg_sales_per_day),avg_sales_per_day]
View(pred)
a[,avg_sales_per_day]
pred[is.na(avg_sales_per_day),]
pred[is.na(pred$avg_sales_per_day),]
pred[is.na(pred$avg_sales_per_day), avg_sales_per_day]
pred[is.na(pred$avg_sales_per_day), "avg_sales_per_day"]
pred[is.na(pred$avg_sales_per_day), "avg_sales_per_day"] <- a[,avg_sales_per_day]
View(pred)
sum(is.na(pred$avg_sales_per_day))
View(pred)
library(data.table)
master_test <- readRDS("master_test.RData")
master_train <- readRDS("master_train.RData")
master_train_avg_product <- master_train[,.(avg_sales_by_product = mean(avg_sales_per_day)), by =.(productID)]
master_train_avg_product <- master_train[,.(avg_sales_per_day = mean(avg_sales_per_day)), by =.(productID)]
pred <- master_test[,.(productID, storeID)]
setkeyv(pred, c("productID", "storeID"))
setkeyv(master_train, c("productID", "storeID"))
pred <- merge(pred, master_train[, .(productID, storeID, avg_sales_per_day)], all.x=TRUE)
pred <- data.frame(pred)
prids <- data.table(productID = pred[is.na(avg_sales_per_day), productID])
pred <- data.table(pred)
prids <- data.table(productID = pred[is.na(avg_sales_per_day), productID])
View(prids)
not_selled_in_training <- data.table(productID = pred[is.na(avg_sales_per_day), productID])
a <- not_selled_in_training[master_train_avg_product, nomatch=0]
setkey(not_selled_in_training, productID)
a <- not_selled_in_training[master_train_avg_product, nomatch=0]
View(a)
master_test <- readRDS("master_test.RData")
master_train <- readRDS("master_train.RData")
master_train_avg_product <- master_train[,.(avg_sales_per_day = mean(avg_sales_per_day)), by =.(productID)]
pred <- master_test[,.(productID, storeID)]
setkeyv(pred, c("productID", "storeID"))
setkeyv(master_train, c("productID", "storeID"))
pred <- merge(pred, master_train[, .(productID, storeID, avg_sales_per_day)], all.x=TRUE)
not_selled_in_training <- data.table(productID = pred[is.na(avg_sales_per_day), productID])
setkey(not_selled_in_training, productID)
not_selled_in_training <- not_selled_in_training[master_train_avg_product, nomatch=0]
pred <- data.frame(pred)
pred[is.na(pred$avg_sales_per_day), "avg_sales_per_day"] <- not_selled_in_training[,avg_sales_per_day]
predict.basic <- function(master_test, master_train){
master_train_avg_product <- master_train[,.(avg_sales_per_day = mean(avg_sales_per_day)), by =.(productID)]
pred <- master_test[,.(productID, storeID)]
setkeyv(pred, c("productID", "storeID"))
setkeyv(master_train, c("productID", "storeID"))
pred <- merge(pred, master_train[, .(productID, storeID, avg_sales_per_day)], all.x=TRUE)
not_selled_in_training <- data.table(productID = pred[is.na(avg_sales_per_day), productID])
setkey(not_selled_in_training, productID)
not_selled_in_training <- not_selled_in_training[master_train_avg_product, nomatch=0]
pred <- data.frame(pred)
pred[is.na(pred$avg_sales_per_day), "avg_sales_per_day"] <- not_selled_in_training[,avg_sales_per_day]
return(pred)
}
p <- predict.basic(master_test, master_train)
View(p)
master_test <- data.frame(master_test)
predistion <- predict.basic(master_test, master_train)
master_test <- readRDS("master_test.RData")
predistion <- predict.basic(master_test, master_train)
master_test <- data.frame(master_test)
b <- master_test$avg_sales_per_day-prediction$avg_sales_per_day
master_test <- readRDS("master_test.RData")
prediction <- predict.basic(master_test, master_train)
master_test <- data.frame(master_test)
b <- master_test$avg_sales_per_day-prediction$avg_sales_per_day
b <- (master_test$avg_sales_per_day-prediction$avg_sales_per_day)**2
b <- sum(master_test$avg_sales_per_day-prediction$avg_sales_per_day)**2)
b <- sum((master_test$avg_sales_per_day-prediction$avg_sales_per_day)**2)
library(data.table)
master_test <- readRDS("master_test.RData")
master_train <- readRDS("master_train.RData")
predict.basic <- function(master_test, master_train){
pred <- master_test[,.(productID, storeID)]
setkeyv(pred, c("productID", "storeID"))
setkeyv(master_train, c("productID", "storeID"))
pred <- merge(pred, master_train[, .(productID, storeID, avg_sales_per_day)], all.x=TRUE)
not_selled_in_training <- data.table(productID = pred[is.na(avg_sales_per_day), productID])
setkey(not_selled_in_training, productID)
master_train_avg_product <- master_train[,.(avg_sales_per_day = mean(avg_sales_per_day)), by =.(productID)]
not_selled_in_training <- not_selled_in_training[master_train_avg_product, nomatch=0]
pred <- data.frame(pred)
pred[is.na(pred$avg_sales_per_day), "avg_sales_per_day"] <- not_selled_in_training[,avg_sales_per_day]
return(pred)
}
#this function
mse <- function(master_test, prediction){
master_test <- data.frame(master_test)
sum((master_test$avg_sales_per_day-prediction$avg_sales_per_day)**2)
}
prediction.basic <- predict.basic(master_test, master_train)
mse(master_test, prediction.basic)
mse <- function(master_test, prediction){
master_test <- data.frame(master_test)
sum((master_test$avg_sales_per_day-prediction$avg_sales_per_day)**2)/nrow(prediction)
}
mse(master_test, prediction.basic)
pred <- master_test[,.(productID, storeID)]
setkeyv(pred, c("productID", "storeID"))
setkeyv(master_train, c("productID", "storeID"))
pred <- merge(pred, master_train[, .(productID, storeID, avg_sales_per_day)], all.x=TRUE)
not_selled_in_training <- data.table(productID = pred[is.na(avg_sales_per_day), productID])
not_selled_in_training <- productID = pred[is.na(avg_sales_per_day), productID]
not_selled_in_training <- pred[is.na(avg_sales_per_day), productID]
master_test[not_selled_in_training,]
pred <- master_test[,.(productID, storeID)]
setkeyv(pred, c("productID", "storeID"))
setkeyv(master_train, c("productID", "storeID"))
pred <- merge(pred, master_train[, .(productID, storeID, avg_sales_per_day)], all.x=TRUE)
not_selled_in_training <- data.table(productID = pred[is.na(avg_sales_per_day), productID])
setkey(not_selled_in_training, productID)
master_train_avg_product <- master_train[,.(avg_sales_per_day = mean(avg_sales_per_day)), by =.(productID)]
not_selled_in_training <- not_selled_in_training[master_train_avg_product, nomatch=0]
View(not_selled_in_training)
not_selled_in_training$present_in_train <- TRUE
not_selled_in_training$present_in_train <- FALSE
pred <- data.frame(pred)
pred[is.na(pred$avg_sales_per_day), "avg_sales_per_day"] <- not_selled_in_training[,avg_sales_per_day]
View(not_selled_in_training)
View(pred)
pred[is.na(pred$avg_sales_per_day), "present_in_train"] <- FALSE
View(pred)
master_test <- readRDS("master_test.RData")
master_train <- readRDS("master_train.RData")
# The predict.basic function uses sales from training where they are available
# and average sales by product where it was not sold before.
# It uses data.table inputs, but the output is data.frame.
predict.basic <- function(master_test, master_train){
pred <- master_test[,.(productID, storeID)]
setkeyv(pred, c("productID", "storeID"))
setkeyv(master_train, c("productID", "storeID"))
pred <- merge(pred, master_train[, .(productID, storeID, avg_sales_per_day)], all.x=TRUE)
not_selled_in_training <- data.table(productID = pred[is.na(avg_sales_per_day), productID])
setkey(not_selled_in_training, productID)
master_train_avg_product <- master_train[,.(avg_sales_per_day = mean(avg_sales_per_day)), by =.(productID)]
not_selled_in_training <- not_selled_in_training[master_train_avg_product, nomatch=0]
pred <- data.frame(pred)
pred[is.na(pred$avg_sales_per_day), "present_in_train"] <- FALSE
pred[is.na(pred$present_in_train), "present_in_train"] <- TRUE
pred[is.na(pred$avg_sales_per_day), "avg_sales_per_day"] <- not_selled_in_training[,avg_sales_per_day]
return(pred)
}
prediction.basic <- predict.basic(master_test, master_train)
View(prediction.basic)
table(prediction.basic$present_in_train)
mse(master_test, prediction.basic)
mse(master_test[prediction.basic$present_in_train,], prediction.basic[prediction.basic$present_in_train,])
mse(master_test[!prediction.basic$present_in_train,], prediction.basic[!prediction.basic$present_in_train,])
master_test <- readRDS("master_test.RData")
master_train <- readRDS("master_train.RData")
pred <- master_test[,.(productID, storeID)]
master_train_avg_product <- master_train[,.(avg_sales_per_day = mean(avg_sales_per_day)), by =.(productID)]
pred <- pred[master_train_avg_product, nomatch=0]
View(pred)
predict.basic <- function(master_test, master_train){
pred <- master_test[,.(productID, storeID)]
setkeyv(pred, c("productID", "storeID"))
setkeyv(master_train, c("productID", "storeID"))
pred <- merge(pred, master_train[, .(productID, storeID, avg_sales_per_day)], all.x=TRUE)
not_selled_in_training <- data.table(productID = pred[is.na(avg_sales_per_day), productID])
setkey(not_selled_in_training, productID)
master_train_avg_product <- master_train[,.(avg_sales_per_day = mean(avg_sales_per_day)), by =.(productID)]
not_selled_in_training <- not_selled_in_training[master_train_avg_product, nomatch=0]
pred <- data.frame(pred)
pred[is.na(pred$avg_sales_per_day), "present_in_train"] <- FALSE
pred[is.na(pred$present_in_train), "present_in_train"] <- TRUE
pred[is.na(pred$avg_sales_per_day), "avg_sales_per_day"] <- not_selled_in_training[,avg_sales_per_day]
return(pred)
}
#This function uses averages by product for prediction.
predict.avg <- function(master_test, master_train){
pred <- master_test[,.(productID, storeID)]
master_train_avg_product <- master_train[,.(avg_sales_per_day = mean(avg_sales_per_day)), by =.(productID)]
pred <- pred[master_train_avg_product, nomatch=0]
pred <- data.frame(pred)
return(pred)
}
prediction.basic <- predict.basic(master_test, master_train)
prediction.avg <- predict.avg(master_test, master_train)
mse(master_test, prediction.basic)
mse <- function(master_test, prediction){
master_test <- data.frame(master_test)
sum((master_test$avg_sales_per_day - prediction$avg_sales_per_day)**2)/nrow(prediction)
}
mse(master_test, prediction.basic)
mse(master_test, prediction.avg)
