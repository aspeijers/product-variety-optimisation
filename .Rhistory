lines(degree.distribution(bg10000), col="blue")
degree.distribution(bg100)
degree.distribution(bg100)[-1:4]
degree.distribution(bg100)[-1]
degree.distribution(bg100)[-c(1:4)]
plot(degree.distribution(bg100)[-c(1:4)], type="line", col="green")
lines(degree.distribution(bg1000)[-c(1:4)], col="red")
lines(degree.distribution(bg10000)[-c(1:4)], col="blue")
power.law.fit(bg100)
power.law.fit(degree.distribution(bg100))
power.law.fit(degree.distribution(bg100)[-c(1:4)])
power.law.fit(degree.distribution(bg1000))
power.law.fit(degree.distribution(bg10000))
power.law.fit(degree.distribution(bg100))$alpha
plot(degree.distribution(bg100, cumulative = TRUE), type="line", col="green")
lines(degree.distribution(bg1000, cumulative = TRUE), col="red")
lines(degree.distribution(bg10000, cumulative = TRUE), col="blue")
plot(degree.distribution(bg100, cumulative = TRUE)[-c(1:4)], type="line", col="green")
lines(degree.distribution(bg1000, cumulative = TRUE)[-c(1:4)], col="red")
lines(degree.distribution(bg10000, cumulative = TRUE)[-c(1:4)], col="blue")
transitivity(bg100)
cc <- NA
for(i in 4:100){
set.seed(1234)
bg <- barabasi.game(n=i, m=4, directed = FALSE, start.graph = graph.full(4))
cc[i-3] <- transitivity(bg)
}
for(i in 4:10000){
set.seed(1234)
bg <- barabasi.game(n=i, m=4, directed = FALSE, start.graph = graph.full(4))
cc[i-3] <- transitivity(bg)
}
plot(cc, type="line")
degree(bg100)
degree(bg100, 4)
d100 <- NA
d1000 <- NA
d5000 <- NA
degree(bg100, 4)
d100[34] <-2
degree(bg100, 345)
cc <- NA
d100 <- NA
d1000 <- NA
d5000 <- NA
for(i in 4:10000){
set.seed(1234)
bg <- barabasi.game(n=i, m=4, directed = FALSE, start.graph = graph.full(4))
if(i>=100){
d100[i] <- degree(bg, 100)
}
if(i>=1000){
d1000[i] <- degree(bg, 1000)
}
if(i>=5000){
d5000[i] <- degree(bg, 5000)
}
cc[i-3] <- transitivity(bg)
}
plot(cc, type="line")
```
plot(d100, type="line", col="green")
lines(d1000, col="red")
lines(d5000, col="blue")
library(igraph)
er1 <- erdos.renyi.game(20, 0.4, "gnp")
er2 <- erdos.renyi.game(20, 0.4, "gnp")
summary(er1)
eru <- er1 %u% er2
summary(eru)
eru <- union(er1, er2, byname = FALSE)
summary(eru)
eru <- union(er1, er2, byname = TRUE)
eru <- graph.disjoint.union(er1, er2,)
eru <- graph.disjoint.union(er1, er2)
summary(eru)
summary(er1)
summary(er2)
library(igraph)
er1 <- erdos.renyi.game(20, 0.4, "gnp")
er2 <- erdos.renyi.game(20, 0.4, "gnp")
er1[[1]]
er1[[2]]
er1[[3]]
vcount(eru)
vcount(er2)
eru <- graph.disjoint.union(er1, er2)
summary(eru)
plot(eru)
eru <- rewire(each_edge(p = 15/vcount(eru)))
eru <- rewire(each_edge(p = 15/vcount(eru), loops = FALSE))
eru <- rewire(eru, each_edge(p = 15/vcount(eru)))
plot(eru)
each_edge(p = 15/vcount(eru))
15/vcount(eru)
setwd("/media/balint/Storage/Tanulas/thesis/product-variety-optimisation")
library(data.table)
sales <- readRDS("sales.RData")
events <- readRDS("events.RData")
promo_prod_date <- readRDS("promotion_dates.RData")
events$date <- as.Date(events$date, "%Y%m%d")
setkey(sales, productID)
enoughdata <- function(date, storeID, relevant_events_treatment, relevant_events_inspected, days_window, relevant_promotions){
date <- as.Date(date)
datebefore <- date-days_window
dateafter <- date+days_window
enoughdata <- TRUE
#Is the time window in the time period when we have data?
if(datebefore < as.Date("2015-01-01") || dateafter > as.Date("2016-03-15")){
enoughdata <- FALSE
}
#Is there only one event for the treatment product in the given store within the time window?
if(nrow(relevant_events_treatment[relevant_events_treatment$storeID==storeID &&
relevant_events_treatment$date >= datebefore &&
relevant_events_treatment$date < dateafter, ]) > 1){
enoughdata <- FALSE
}
#Is there any event for the inspected product in the given store within the time window?
if(nrow(relevant_events_treatment[relevant_events_inspected$storeID==storeID &&
relevant_events_inspected$date >= datebefore &&
relevant_events_inspected$date < dateafter, ]) > 0){
enoughdata <- FALSE
}
#Has the inspected product a promotion in the given period?
if(nrow(relevant_promotions[relevant_promotions$storeID==storeID &&
relevant_promotions$promo_start_date >= datebefore-14 &&
relevant_promotions$promo_start_date < dateafter, ]) > 0){
enoughdata <- FALSE
}
return(enoughdata)
}
library(reshape2)
even <- events[,-c(1, 3, 4)]
event_table_all <- aggregate(even[,-1], by=data.frame(even$productID), sum)
event_table_all <- melt(event_table_all, id=1)
names(event_table_all) <- c("treatment_productID", "inspected_productID", "number_of_events")
even <- events[events$begin,-c(1, 3, 4)]
event_table_intro <- aggregate(even[,-1], by=data.frame(even$productID), sum)
event_table_intro <- melt(event_table_intro, id=1)
names(event_table_intro) <- c("treatment_productID", "inspected_productID", "number_of_intros")
even <- events[!events$begin,-c(1, 3, 4)]
event_table_out <- aggregate(even[,-1], by=data.frame(even$productID), sum)
event_table_out <- melt(event_table_out, id=1)
names(event_table_out) <- c("treatment_productID", "inspected_productID", "number_of_outs")
event_table_all <- merge(event_table_all, event_table_intro)
event_table_all <- merge(event_table_all, event_table_out)
event_table_all <- event_table_all[as.character(event_table_all$treatment_productID)!=as.character(event_table_all$inspected_productID),]
event_table_all <- event_table_all[event_table_all$number_of_events>10,]
numberofevents <- function(treatment_product, inspected_product, days_window, introduction, events, promo_prod_date){
relevant_events_treatment <- events[events$productID==treatment_product &
events[, inspected_product], 1:4]
relevant_events_inspected <- events[events$productID==inspected_product, 1:4]
relevant_events_forcalc <- relevant_events_treatment[relevant_events_treatment$begin==introduction,]
cat(".")
relevant_promotions <- promo_prod_date[productID == inspected_product,]
#Was the inspected product available long enough before and after the event?
sum(apply(relevant_events_forcalc, 1, function(x)
enoughdata(x['date'], x['storeID'], relevant_events_treatment, relevant_events_inspected, days_window, relevant_promotions)))
}
event_table_all$number_of_intros30 <- apply(event_table_all[,1:2], 1, function(x) numberofevents(x['treatment_productID'], x['inspected_productID'], 30, introduction = TRUE, events, promo_prod_date))
View(event_table_all)
sum(is.na(event_table_all))
tail(event_table_all)
sum(event_table_all$number_of_intros==0)
event_table_all$number_of_intros30[event_table_all$number_of_intros>0] <- apply(event_table_all[event_table_all$number_of_intros>0,1:2], 1, function(x) numberofevents(x['treatment_productID'], x['inspected_productID'], 30, introduction = TRUE, events, promo_prod_date))
t0 <- system.time(diffindiff("G01F04S12S01", "G01F01S01S01", 30, introduction = TRUE,
events = events, sales = sales, promo_prod_date))
diffindiff <- function(treatment_product, inspected_product, days_window, introduction,
events, sales, promo_prod_date){
#relevant_events_forcalc contains the events from which we potentially want to calculate a salesratio.
#relevant_events_treatment and relevant_events_inspected contain the events
# which are needed to check if the products were available for enough time.
relevant_events_treatment <- events[events$productID==treatment_product &
events[, inspected_product], 1:4]
relevant_events_inspected <- events[events$productID==inspected_product, 1:4]
relevant_events_forcalc <- relevant_events_treatment[relevant_events_treatment$begin==introduction,]
cat("relevant events selected\n")
relevant_promotions <- promo_prod_date[productID == inspected_product,]
relevant_events_forcalc$enoughdata <- NA
#Was the inspected product available long enough before and after the event?
relevant_events_forcalc$enoughdata <- apply(relevant_events_forcalc, 1, function(x) enoughdata(x['date'], x['storeID'], relevant_events_treatment, relevant_events_inspected, days_window, relevant_promotions))
relevant_events_forcalc <- relevant_events_forcalc[relevant_events_forcalc$enoughdata,]
cat("\nRelevant events with enough sales data found.\n")
cat("Number of events:")
cat(nrow(relevant_events_forcalc))
cat("\n")
relevant_events_forcalc$salesafter <- NA
relevant_events_forcalc$salesbefore <- NA
relevant_events_forcalc$salesratio <- NA
relevant_sales <- sales[productID == inspected_product,]
setkeyv(relevant_sales, c("storeID", "date"))
for(i in 1:nrow(relevant_events_forcalc)){
cat(i)
relevant_sales_for_specific_store <- relevant_sales[storeID == relevant_events_forcalc$storeID[i],]
# shift function -> add zero rows to sales function (look at promotion_identification_smoothing.R)
relevant_events_forcalc$salesbefore[i] <- sum(relevant_sales_for_specific_store[date < relevant_events_forcalc$date[i] &
date >= relevant_events_forcalc$date[i]-days_window, quantity_sold_kg])
relevant_events_forcalc$salesafter[i] <- sum(relevant_sales_for_specific_store[date >= relevant_events_forcalc$date[i] &
date < relevant_events_forcalc$date[i]+days_window, quantity_sold_kg])
}
cat("\n")
relevant_events_forcalc$salesratio <- relevant_events_forcalc$salesafter/relevant_events_forcalc$salesbefore
relevant_events_forcalc <- relevant_events_forcalc[!is.na(relevant_events_forcalc$salesratio),]
return(relevant_events_forcalc)
}
t0 <- system.time(diffindiff("G01F04S12S01", "G01F01S01S01", 30, introduction = TRUE,
events = events, sales = sales, promo_prod_date))
t0
enoughdata <- function(date, storeID, relevant_events_treatment, relevant_events_inspected, days_window, relevant_promotions){
date <- as.Date(date)
datebefore <- date-days_window
dateafter <- date+days_window
enoughdata <- TRUE
#Is the time window in the time period when we have data?
if(datebefore < as.Date("2015-01-01") || dateafter > as.Date("2016-03-15")){
enoughdata <- FALSE
}
#Is there only one event for the treatment product in the given store within the time window?
else if(nrow(relevant_events_treatment[relevant_events_treatment$storeID==storeID &&
relevant_events_treatment$date >= datebefore &&
relevant_events_treatment$date < dateafter, ]) > 1){
enoughdata <- FALSE
}
#Is there any event for the inspected product in the given store within the time window?
else if(nrow(relevant_events_treatment[relevant_events_inspected$storeID==storeID &&
relevant_events_inspected$date >= datebefore &&
relevant_events_inspected$date < dateafter, ]) > 0){
enoughdata <- FALSE
}
#Has the inspected product a promotion in the given period?
else if(nrow(relevant_promotions[relevant_promotions$storeID==storeID &&
relevant_promotions$promo_start_date >= datebefore-14 &&
relevant_promotions$promo_start_date < dateafter, ]) > 0){
enoughdata <- FALSE
}
return(enoughdata)
}
t1 <- system.time(diffindiff("G01F04S12S01", "G01F01S01S01", 30, introduction = TRUE,
events = events, sales = sales, promo_prod_date))
t0
t1
enoughdata <- function(date, storeID, relevant_events_treatment, relevant_events_inspected, days_window, relevant_promotions){
date <- as.Date(date)
datebefore <- date-days_window
dateafter <- date+days_window
enoughdata <- TRUE
#Is the time window in the time period when we have data?
if(datebefore < as.Date("2015-01-01") || dateafter > as.Date("2016-03-15")){
enoughdata <- FALSE
}
#Is there any event for the inspected product in the given store within the time window?
else if(nrow(relevant_events_treatment[relevant_events_inspected$storeID==storeID &&
relevant_events_inspected$date >= datebefore &&
relevant_events_inspected$date < dateafter, ]) > 0){
enoughdata <- FALSE
}
#Is there only one event for the treatment product in the given store within the time window?
else if(nrow(relevant_events_treatment[relevant_events_treatment$storeID==storeID &&
relevant_events_treatment$date >= datebefore &&
relevant_events_treatment$date < dateafter, ]) > 1){
enoughdata <- FALSE
}
#Has the inspected product a promotion in the given period?
else if(nrow(relevant_promotions[relevant_promotions$storeID==storeID &&
relevant_promotions$promo_start_date >= datebefore-14 &&
relevant_promotions$promo_start_date < dateafter, ]) > 0){
enoughdata <- FALSE
}
return(enoughdata)
}
t2 <- system.time(diffindiff("G01F04S12S01", "G01F01S01S01", 30, introduction = TRUE,
events = events, sales = sales, promo_prod_date))
enoughdata <- function(date, storeID, relevant_events_treatment, relevant_events_inspected, days_window, relevant_promotions){
date <- as.Date(date)
datebefore <- date-days_window
dateafter <- date+days_window
enoughdata <- TRUE
#Is the time window in the time period when we have data?
if(datebefore < as.Date("2015-01-01") || dateafter > as.Date("2016-03-15")){
enoughdata <- FALSE
}
#Is there only one event for the treatment product in the given store within the time window?
else if(nrow(relevant_events_treatment[relevant_events_treatment$storeID==storeID &&
relevant_events_treatment$date >= datebefore &&
relevant_events_treatment$date < dateafter, ]) > 1){
enoughdata <- FALSE
}
#Is there any event for the inspected product in the given store within the time window?
else if(nrow(relevant_events_treatment[relevant_events_inspected$storeID==storeID &&
relevant_events_inspected$date >= datebefore &&
relevant_events_inspected$date < dateafter, ]) > 0){
enoughdata <- FALSE
}
#Has the inspected product a promotion in the given period?
else if(nrow(relevant_promotions[relevant_promotions$storeID==storeID &&
relevant_promotions$promo_start_date >= datebefore-14 &&
relevant_promotions$promo_start_date < dateafter, ]) > 0){
enoughdata <- FALSE
}
return(enoughdata)
}
t2
t1 <- system.time(diffindiff("G01F04S12S01", "G01F01S01S01", 30, introduction = TRUE,
events = events, sales = sales, promo_prod_date))
t1
enoughdata <- function(date, storeID, relevant_events_treatment, relevant_events_inspected, days_window, relevant_promotions){
date <- as.Date(date)
datebefore <- date-days_window
dateafter <- date+days_window
enoughdata <- TRUE
#Is the time window in the time period when we have data?
if(datebefore < as.Date("2015-01-01") || dateafter > as.Date("2016-03-15")){
enoughdata <- FALSE
}
#Is there only one event for the treatment product in the given store within the time window?
else if(nrow(relevant_events_treatment[relevant_events_treatment$storeID==storeID &&
relevant_events_treatment$date >= datebefore &&
relevant_events_treatment$date < dateafter, ]) > 1){
enoughdata <- FALSE
}
#Is there any event for the inspected product in the given store within the time window?
else if(nrow(relevant_events_treatment[relevant_events_inspected$storeID==storeID &&
relevant_events_inspected$date >= datebefore &&
relevant_events_inspected$date < dateafter, ]) > 0){
enoughdata <- FALSE
}
#Has the inspected product a promotion in the given period?
else if(nrow(relevant_promotions[relevant_promotions$storeID==storeID &&
relevant_promotions$promo_start_date >= datebefore-14 &&
relevant_promotions$promo_start_date < dateafter, ]) > 0){
enoughdata <- FALSE
}
return(enoughdata)
}
t1 <- system.time(diffindiff("G01F04S12S01", "G01F01S01S01", 30, introduction = TRUE,
events = events, sales = sales, promo_prod_date))
t1
t1 <- system.time(diffindiff("G01F04S12S01", "G01F01S01S01", 30, introduction = TRUE,
events = events, sales = sales, promo_prod_date))
t1
t1 <- system.time(diffindiff("G01F04S12S01", "G01F01S01S01", 30, introduction = TRUE,
events = events, sales = sales, promo_prod_date))
t1
enoughdata <- function(date, storeID, relevant_events_treatment, relevant_events_inspected, days_window, relevant_promotions){
date <- as.Date(date)
datebefore <- date-days_window
dateafter <- date+days_window
enoughdata <- TRUE
#Is the time window in the time period when we have data?
if(datebefore < as.Date("2015-01-01") || dateafter > as.Date("2016-03-15")){
enoughdata <- FALSE
#Is there only one event for the treatment product in the given store within the time window?
}else if(nrow(relevant_events_treatment[relevant_events_treatment$storeID==storeID &&
relevant_events_treatment$date >= datebefore &&
relevant_events_treatment$date < dateafter, ]) > 1){
enoughdata <- FALSE
#Is there any event for the inspected product in the given store within the time window?
}else if(nrow(relevant_events_treatment[relevant_events_inspected$storeID==storeID &&
relevant_events_inspected$date >= datebefore &&
relevant_events_inspected$date < dateafter, ]) > 0){
enoughdata <- FALSE
#Has the inspected product a promotion in the given period?
}else if(nrow(relevant_promotions[relevant_promotions$storeID==storeID &&
relevant_promotions$promo_start_date >= datebefore-14 &&
relevant_promotions$promo_start_date < dateafter, ]) > 0){
enoughdata <- FALSE
}
return(enoughdata)
}
t1 <- system.time(diffindiff("G01F04S12S01", "G01F01S01S01", 30, introduction = TRUE,
events = events, sales = sales, promo_prod_date))
t1
t1 <- system.time(diffindiff("G01F04S12S01", "G01F01S01S01", 30, introduction = TRUE,
events = events, sales = sales, promo_prod_date))
t1
numberofevents <- function(treatment_product, inspected_product, days_window, introduction, events, promo_prod_date){
relevant_events_treatment <- events[events$productID==treatment_product &
events[, inspected_product], 1:4]
relevant_events_inspected <- events[events$productID==inspected_product, 1:4]
relevant_events_forcalc <- relevant_events_treatment[relevant_events_treatment$begin==introduction,]
cat(".")
relevant_promotions <- promo_prod_date[productID == inspected_product,]
#Was the inspected product available long enough before and after the event?
sum(apply(relevant_events_forcalc, 1, function(x)
enoughdata(x['date'], x['storeID'], relevant_events_treatment, relevant_events_inspected, days_window, relevant_promotions)))
}
diffindiff <- function(treatment_product, inspected_product, days_window, introduction,
events, sales, promo_prod_date){
#relevant_events_forcalc contains the events from which we potentially want to calculate a salesratio.
#relevant_events_treatment and relevant_events_inspected contain the events
# which are needed to check if the products were available for enough time.
relevant_events_treatment <- events[events$productID==treatment_product &
events[, inspected_product], 1:4]
relevant_events_inspected <- events[events$productID==inspected_product, 1:4]
relevant_events_forcalc <- relevant_events_treatment[relevant_events_treatment$begin==introduction,]
cat("relevant events selected\n")
relevant_promotions <- promo_prod_date[productID == inspected_product,]
relevant_events_forcalc$enoughdata <- NA
#Was the inspected product available long enough before and after the event?
relevant_events_forcalc$enoughdata <- apply(relevant_events_forcalc, 1, function(x) enoughdata(x['date'], x['storeID'], relevant_events_treatment, relevant_events_inspected, days_window, relevant_promotions))
relevant_events_forcalc <- relevant_events_forcalc[relevant_events_forcalc$enoughdata,]
cat("\nRelevant events with enough sales data found.\n")
cat("Number of events:")
cat(nrow(relevant_events_forcalc))
cat("\n")
relevant_events_forcalc$salesafter <- NA
relevant_events_forcalc$salesbefore <- NA
relevant_events_forcalc$salesratio <- NA
relevant_sales <- sales[productID == inspected_product,]
setkeyv(relevant_sales, c("storeID", "date"))
for(i in 1:nrow(relevant_events_forcalc)){
cat(i)
relevant_sales_for_specific_store <- relevant_sales[storeID == relevant_events_forcalc$storeID[i],]
# shift function -> add zero rows to sales function (look at promotion_identification_smoothing.R)
relevant_events_forcalc$salesbefore[i] <- sum(relevant_sales_for_specific_store[date < relevant_events_forcalc$date[i] &
date >= relevant_events_forcalc$date[i]-days_window, quantity_sold_kg])
relevant_events_forcalc$salesafter[i] <- sum(relevant_sales_for_specific_store[date >= relevant_events_forcalc$date[i] &
date < relevant_events_forcalc$date[i]+days_window, quantity_sold_kg])
}
cat("\n")
relevant_events_forcalc$salesratio <- relevant_events_forcalc$salesafter/relevant_events_forcalc$salesbefore
relevant_events_forcalc <- relevant_events_forcalc[!is.na(relevant_events_forcalc$salesratio),]
return(relevant_events_forcalc)
}
t1 <- system.time(diffindiff("G01F04S12S01", "G01F01S01S01", 30, introduction = TRUE,
events = events, sales = sales, promo_prod_date))
t1 <- system.time(diffindiff("G01F04S12S01", "G01F01S01S01", 30, introduction = TRUE,
events = events, sales = sales, promo_prod_date))
t1 <- system.time(diffindiff("G01F04S12S01", "G01F01S01S01", 30, introduction = TRUE,
events = events, sales = sales, promo_prod_date))
t1 <- system.time(diffindiff("G01F04S12S01", "G01F01S01S01", 30, introduction = TRUE,
events = events, sales = sales, promo_prod_date))
t1 <- system.time(diffindiff("G01F04S12S01", "G01F01S01S01", 30, introduction = TRUE,
events = events, sales = sales, promo_prod_date))
t1 <- system.time(diffindiff("G01F04S12S01", "G01F01S01S01", 30, introduction = TRUE,
events = events, sales = sales, promo_prod_date))
detectCores()
install.packages("parallel")
?detectCores
library(parallel)
detectCores()
event_table_test <- event_table_all[1:1000,]
install.packages("foreach")
library(foreach)
a<- foreach(x=iter(event_table_test[,1:2], by='row'), .combine='c') %dopar% numberofevents(x['treatment_productID'], x['inspected_productID'], 30, introduction = TRUE, events, promo_prod_date)
a<- foreach(x=iter(event_table_test[,1:2], by='row'), .combine='c') %do% numberofevents(x['treatment_productID'], x['inspected_productID'], 30, introduction = TRUE, events, promo_prod_date)
library(iterators)
library(foreach)
library(iterators)
a<- foreach(x=iter(event_table_test[,1:2], by='row'), .combine='c') %do% numberofevents(x['treatment_productID'], x['inspected_productID'], 30, introduction = TRUE, events, promo_prod_date)
a<- foreach(x=iter(event_table_test[,1:2], by='row'), .combine='c') %do% numberofevents(x$treatment_productID, x$inspected_productID, 30, introduction = TRUE, events, promo_prod_date)
a<- foreach(x=iter(event_table_test[event_table_test$number_of_intros>0,1:2], by='row'), .combine='c') %do% numberofevents(x$treatment_productID, x$inspected_productID, 30, introduction = TRUE, events, promo_prod_date)
event_table_test <- event_table_all[1:100,]
a<- foreach(x=iter(event_table_test[event_table_test$number_of_intros>0,1:2], by='row'), .combine='c') %do% numberofevents(x$treatment_productID, x$inspected_productID, 30, introduction = TRUE, events, promo_prod_date)
event_table_test <- event_table_all[1:10,]
a<- foreach(x=iter(event_table_test[event_table_test$number_of_intros>0,1:2], by='row'), .combine='c') %do% numberofevents(x$treatment_productID, x$inspected_productID, 30, introduction = TRUE, events, promo_prod_date)
a<- foreach(x=iter(event_table_test[event_table_test$number_of_intros>0,1:2], by='row'), .combine=rbind) %do% numberofevents(x$treatment_productID, x$inspected_productID, 30, introduction = TRUE, events, promo_prod_date)
apply(event_table_test[event_table_test$number_of_intros>0,1:2], 1, function(x) numberofevents(x['treatment_productID'], x['inspected_productID'], 30, introduction = TRUE, events, promo_prod_date))
apply(event_table_test, 1, function(x) numberofevents(x['treatment_productID'], x['inspected_productID'], 30, introduction = TRUE, events, promo_prod_date))
foreach(x=iter(event_table_test, by='row'), .combine=rbind) %do% numberofevents(x$treatment_productID, x$inspected_productID, 30, introduction = TRUE, events, promo_prod_date)
tables()
library(data.table)
foreach(x=iter(event_table_test, by='row'), .combine=rbind) %do% numberofevents(x$treatment_productID, x$inspected_productID, 30, introduction = TRUE, events, promo_prod_date)
apply(event_table_test, 1, function(x) numberofevents(x['treatment_productID'], x['inspected_productID'], 30, introduction = TRUE, events, promo_prod_date))
apply(event_table_test[event_table_test$number_of_intros>0,1:2], 1, function(x) numberofevents(x['treatment_productID'], x['inspected_productID'], 30, introduction = TRUE, events, promo_prod_date))
foreach(x=iter(event_table_test[event_table_test$number_of_intros>0,1:2], by='row'), .combine=rbind) %do% numberofevents(x$treatment_productID, x$inspected_productID, 30, introduction = TRUE, events, promo_prod_date)
tables()
numberofevents <- function(treatment_product, inspected_product, days_window, introduction, events, promo_prod_date){
relevant_events_treatment <- events[events$productID==treatment_product &
events[, inspected_product], 1:4]
relevant_events_inspected <- events[events$productID==inspected_product, 1:4]
relevant_events_forcalc <- relevant_events_treatment[relevant_events_treatment$begin==introduction,]
cat(".")
relevant_promotions <- promo_prod_date[