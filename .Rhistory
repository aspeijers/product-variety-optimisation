x = (1,2)
x <- (1,2)
x <- c(1,2)
2^10
?.Machine
.Machine
my.first.app <- function(){"Hello World!"}
my.first.app()
type(my.first.app())
class(my.first.app())
my.first.app <- function{"Hello World!"}
my.first.app <- function(){Hello World!}
pareto.simulator <- function(rdraws, alpha){
paretodraw <- (1-rdraws)**(-1/alpha)
}
pareto.simulator(runif(100), 2)
s<-pareto.simulator(runif(100), 2)
hist(pareto.simulator(runif(100), 2))
hist(pareto.simulator(runif(1000), 2))
hist(pareto.simulator(runif(1000), 5))
var(c(2,5,7))
var(c(4,10,14))
var(c(2,5,7))/5
var(c(4,10,14))/10
var(c(2,5,7))/25
var(c(4,10,14))/100
sd(c(3,5,7))
sd(c(6,10,14))
sd(c(3,5,7))/5
sd(c(6,10,14))/10
library("foreign", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
PFpackages <- c('biglm', 'ffbase', 'ggplot2', 'sgd')
install.packages(PFpackages, repos = 'http://cran.rstudio.com/')# ffbase Provides support for data.frame like objects that connect to
require(ffbase)
require(biglm)
# ggplot2 is for flexible plotting
require(ggplot2)
# sgd is for stochastic gradient descent methods
require(sgd)
install.packages("ggplot2")
install.packages("plyr")
load("/media/balint/Storage/Tanulas/Computing Lab/Project/lyrics_data.RData")
lyrics[56777]
library(mvtnorm)
# create small wrapper functions
sigmaXY <- function(rho, sdX, sdY) {
covTerm <- rho * sdX * sdY
VCmatrix <- matrix(c(sdX^2, covTerm, covTerm, sdY^2),
2, 2, byrow = TRUE)
return(VCmatrix)
}
genBVN <- function(n = 1, seed = NA, muXY=c(0,1), sigmaXY=diag(2)) {
if(!is.na(seed)) set.seed(seed)
rdraws <- rmvnorm(n, mean = muXY, sigma = sigmaXY)
return(rdraws)
}
# creating a function for all of this
loanData <- function(noApproved, noDenied, noUndecided,
muApproved, muDenied, muUndecided,
sdApproved, sdDenied, sdUndecided,
rhoApproved, rhoDenied, rhoUndecided, seed=1111) {
sigmaApproved <- sigmaXY(rho=rhoApproved, sdX=sdApproved[1], sdY=sdApproved[2])
sigmaDenied <- sigmaXY(rho=rhoDenied, sdX=sdDenied[1], sdY=sdDenied[2])
sigmaUndecided <- sigmaXY(rho=rhoUndecided, sdX=sdUndecided[1], sdY=sdUndecided[2])
approved <- genBVN(noApproved, muApproved, sigmaApproved, seed = seed)
denied <- genBVN(noDenied, muDenied, sigmaDenied, seed = seed+1)
undecided <- genBVN(noUndecided, muUndecided, sigmaUndecided, seed = seed+1)
loanDf <- as.data.frame(rbind(approved,denied,undecided))
deny <- c(rep("Approved", noApproved), rep("Denied", noDenied), rep("Undecided", noUndecided))
targetApproved = c(rep(1, noApproved), rep(0, noDenied), rep(0, noUndecided))
targetDenied = c(rep(0, noApproved), rep(1, noDenied), rep(0, noUndecided))
targetUndecided = c(rep(0, noApproved), rep(0, noDenied), rep(1, noUndecided))
loanDf <- data.frame(loanDf, deny, targetApproved, targetDenied, targetUndecided)
colnames(loanDf) <- c("PIratio", "solvency", "deny", "targetApproved", "targetDenied", "targetUndecided")
return(loanDf)
}
loanDf <- loanData(noApproved=50, noDenied=50, noUndecided=25,
c(4, 150), c(10, 100), c(8, 160),
c(1,20), c(2,30), c(2, 10), -0.1, 0.6, 0.2, 1221)
# analytical solution
X <- as.matrix(cbind(ind=rep(1, nrow(loanDf)),
loanDf[,c("PIratio", "solvency")]))
Y <- as.matrix(loanDf[,c("targetApproved", "targetDenied", "targetUndecided")])
weightsOptim <- solve(t(X)%*%X) %*% t(X) %*% Y
# compute predictions
predictions <- data.frame(X %*% weightsOptim)
names(predictions) <- c("predictionApproved", "predictionDenied", "predictionUndecided")
loanDf <- cbind(loanDf, predictions)
# classify according to the argmax criterion
loanDf$predictedLabels[loanDf$predictionApproved > loanDf$predictionDenied
& loanDf$predictionApproved > loanDf$predictionUndecided] <- "Approved"
loanDf$predictedLabels[loanDf$predictionDenied > loanDf$predictionApproved
& loanDf$predictionDenied > loanDf$predictionUndecided] <- "Denied"
loanDf$predictedLabels[loanDf$predictionUndecided > loanDf$predictionApproved
& loanDf$predictionUndecided > loanDf$predictionDenied] <- "Undecided"
# classification algorithm performance
table(loanDf$deny, loanDf$predictedLabels)
library(ggplot2)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio, colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PIratio") +
theme_bw() +
theme(text=element_text(family="Arial")) +
geom_line(data=(c(,)))
ggplot(data = loanDf,
aes(x = solvency, y = PIratio, colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PIratio") +
theme_bw() +
theme(text=element_text(family="Arial"))
View(weightsOptim)
View(X)
View(Y)
View(predictions)
View(weightsOptim)
b <- -weightsOptim[1,]
rep(1, 3)
A <- rbind(rep(1, 3), weightsOptim[1,])
View(A)
A <- rbind(rep(1, 3), weightsOptim[-1,])
View(A)
A <- rbind(rep(-1, 3), weightsOptim[-1,])
View(A)
solve(A, b)
A <- t(rbind(rep(-1, 3), weightsOptim[-1,]))
solve(A, b)
intersection <- solve(A, b)
View(loanDf)
lowpiont <- 0.9*min(loanDf$solvency)
lowsolvency <- 0.9*min(loanDf$solvency)
highsolvency <- 1.1*max(loanDf$solvency)
PIratio_ontheline <- function(solvency, weights1, weights2){
Pratio <- ((weights1$solvency-weights2$solvency)+weights1$ind-weights2$ind)/(weights2$PIratio-weights1$PIratio)
}
weightsOptim$targetApproved
weightsOptim[,"targetApproved"]
PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
w<-weightsOptim[,"targetApproved"]
w["solvency"]
PIratio_ontheline <- function(solvency, weights1, weights2){
Pratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"]/(weights2["PIratio"]-weights1["PIratio"])
}
PIratio_ontheline <- function(solvency, weights1, weights2){
Pratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"])/(weights2["PIratio"]-weights1["PIratio"])
}
PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
bh<-PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
bh
PIratio_ontheline <- function(solvency, weights1, weights2){
PIratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"])/(weights2["PIratio"]-weights1["PIratio"])
return PIratio
}
PIratio_ontheline <- function(solvency, weights1, weights2){
PIratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"])/(weights2["PIratio"]-weights1["PIratio"])
return PIratio
PIratio_ontheline <- function(solvency, weights1, weights2){
PIratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"])/(weights2["PIratio"]-weights1["PIratio"])
}
PIratio_ontheline <- function(solvency, weights1, weights2){
piratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"])/(weights2["PIratio"]-weights1["PIratio"])
}
bh<-PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
View(loanDf)
pilowsolvAD <- PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
pilowsolvAU <- PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetUndecided"])
pilowsolvDU <- PIratio_ontheline(lowsolvency, weightsOptim[,"targetDenied"], weightsOptim[,"targetUndecided"])
pihighsolvAD <- PIratio_ontheline(highsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
pihighsolvAU <- PIratio_ontheline(highsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetUndecided"])
pihighsolvDU <- PIratio_ontheline(highsolvency, weightsOptim[,"targetDenied"], weightsOptim[,"targetUndecided"])
pilowsolvAD
intersection
intersection["PIratio"]
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD) )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD) )
}
prediction <- function(solvency, PIratio, weights){
r <- weights["ind"]+weights["solvency"]*solvency+weights["PIratio"]*PIratio
}
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD) )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD) )
}
library(ggplot2)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio, colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PIratio") +
theme_bw() +
theme(text=element_text(family="Arial")) +
geom_line(data=boundaryDf1)
View(loanDf)
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD), deny=rep(2, "boundaryAD") )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD), deny=rep(2, "boundaryAD") )
}
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD), deny=rep(2, "boundaryAD") )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD), deny=rep(2, "boundaryAD") )
}
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD), deny=rep("boundaryAD",2) )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD), deny=rep("boundaryAD",2) )
}
library(ggplot2)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio, colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PIratio") +
theme_bw() +
theme(text=element_text(family="Arial")) +
geom_line(data=boundaryDf1)
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD), deny=rep("boundaryAD",2) )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD), deny=rep("boundaryAD",2) )
}
if( prediction(lowsolvency, pilowsolvAU, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAU, weightsOptim[,"targetDenied"])){
boundaryDf2 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAU), deny=rep("boundaryAU",2) )
} else {
boundaryDf2 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAU), deny=rep("boundaryAU",2) )
}
if( prediction(lowsolvency, pilowsolvDU, weightsOptim[,"targetDenied"]) > prediction(lowsolvency, pilowsolvDU, weightsOptim[,"targetApproved"])){
boundaryDf3 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvDU), deny=rep("boundaryDU",2) )
} else {
boundaryDf3 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvDU), deny=rep("boundaryDU",2) )
}
library(ggplot2)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio, colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PIratio") +
theme_bw() +
theme(text=element_text(family="Arial")) +
geom_line(data=boundaryDf1) +
geom_line(data=boundaryDf2) +
geom_line(data=boundaryDf3)
table(loanDf$deny, loanDf$predictedLabels)
lowPIratio <- 0.9*min(loanDf$PIratio)
highPIratio <- 1.1*max(loanDf$PIratio)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
install.packages("fractal")
install.packages("car")
library(car)
library(fractal)
library(tseries)
if (!require('devtools')) install.packages('devtools')
devtools::install_github("abarciauskas-bgse/bplmnist")
library(bplmnist)
library(randomForest)
?randomForest
?cable
?kable
library(knitr)
?kable
require(devtools)
install_github("hadley/productplots")
?prodplot
library(productplots)
?prodplot
library(ggplot2)
prodplot(happy, ~ happy, "hbar")
prodplot(happy, ~ sex + happy, c("vspine", "hbar"))
prodplot(happy, ~ sex + happy, stacked())
prodplot(happy, ~ happy + sex, c("hbar", "hbar"))
prodplot(happy, ~ happy + sex + health, c("hbar", "fluct"))
shiny::runApp('/media/balint/Storage/Tanulas/Data_Visualization/project/dv_shiny')
shiny::runApp('/media/balint/Storage/Tanulas/Data_Visualization/project/dv_shiny')
shiny::runApp('/media/balint/Storage/Tanulas/Data_Visualization/project/dv_shiny')
shiny::runApp('/media/balint/Storage/Tanulas/Data_Visualization/project/dv_shiny')
shiny::runApp('/media/balint/Storage/Tanulas/Data_Visualization/project/dv_shiny')
names(adat)
table(adat[,23])
adat <- adat[!is.na(adat[,117]), ]
table(adat[,23])
table(adat$X16.gyerekkor.orszag)
setwd("/media/balint/Storage/Tanulas/thesis/product-variety-optimisation")
library(data.table)
master_test <- readRDS("master_test.RData")
master_train <- readRDS("master_train.RData")
predict.basic <- function(master_test, master_train){
#create a pred table with the same size and same rows than master_test
pred <- master_test[,.(productID, storeID)]
#add the avg_sales_per_day to pred where they were present in master_train
setkeyv(pred, c("productID", "storeID"))
setkeyv(master_train, c("productID", "storeID"))
pred <- merge(pred, master_train[, .(productID, storeID, avg_sales_per_day)], all.x=TRUE)
#identify which product-store pairs are not present in master_train, but are in master_test
#these are the same pairs for which we could not find their match in the previous step
not_sold_in_training <- data.table(productID = pred[is.na(avg_sales_per_day), productID])
#for these 'not_sold_in_training' we provide the sales estimate based on average sales of the product in other stores
setkey(not_sold_in_training, productID)
master_train_avg_product <- master_train[,.(avg_sales_per_day = mean(avg_sales_per_day)), by =.(productID)]
not_sold_in_training <- not_sold_in_training[master_train_avg_product, nomatch=0] #this is an inner join, just with weird syntax
#we create the boolean variable 'present_in_train' to show this difference in estimation
pred <- data.frame(pred)
pred[is.na(pred$avg_sales_per_day), "present_in_train"] <- FALSE
pred[is.na(pred$present_in_train), "present_in_train"] <- TRUE
#final joining of the estimations
pred[is.na(pred$avg_sales_per_day), "avg_sales_per_day"] <- not_sold_in_training[,avg_sales_per_day]
return(pred)
}
predict.avg <- function(master_test, master_train){
pred <- master_test[,.(productID, storeID)]
master_train_avg_product <- master_train[,.(avg_sales_per_day = mean(avg_sales_per_day)), by =.(productID)]
pred <- pred[master_train_avg_product, nomatch=0]
pred <- data.frame(pred)
return(pred)
}
prediction.basic <- predict.basic(master_test, master_train)
prediction.avg <- predict.avg(master_test, master_train)
sum(is.na(master_test$avg_sales_per_day))
a <- data.table(productID = c("c3f3w", "sdfgsg", "sdfji4445"),)
a <- data.table(productID = c("c3f3w", "sdfgsg", "sdfji4445"), c("ha4r43", "wf34", "sg"))
a
library(dplyr)
master.test <- data.frame(master.test)
master_test <- data.frame(master_test)
diff <- anti_join(master_test[,1:2],prediction.avg[,1:2])
diff <- anti_join(master_test[,1:2],prediction.basic[,1:2])
diff <- anti_join(master_test[,1:2],prediction.basic[,1:2])
master_test <- data.table(master_test)
pred <- master_test[,.(productID, storeID)]
#add the avg_sales_per_day to pred where they were present in master_train
setkeyv(pred, c("productID", "storeID"))
setkeyv(master_train, c("productID", "storeID"))
pred <- merge(pred, master_train[, .(productID, storeID, avg_sales_per_day)], all.x=TRUE)
pred <- master_test[,.(productID, storeID)]
#add the avg_sales_per_day to pred where they were present in master_train
setkeyv(pred, c("productID", "storeID"))
setkeyv(master_train, c("productID", "storeID"))
pred <- merge(pred, master_train[, .(productID, storeID, avg_sales_per_day)], all.x=TRUE)
pred1 <- merge(pred, master_train[, .(productID, storeID, avg_sales_per_day)], by = c(productID,storeID), all.x=TRUE)
pred1 <- merge(pred, master_train[, .(productID, storeID, avg_sales_per_day)], by = c("productID","storeID"), all.x=TRUE)
sum(is.na(pred$avg_sales_per_day))
sum(is.na(pred1$avg_sales_per_day))
pred <- merge(pred, master_train[, .(productID, storeID, avg_sales_per_day)], all.x=TRUE)
pred <- merge(pred, master_train[, .(productID, storeID, avg_sales_per_day)], all.x=TRUE)
pred <- merge(pred, master_train[, .(productID, storeID, avg_sales_per_day)], all.x=TRUE)
pred <- merge(pred, master_train[, .(productID, storeID, avg_sales_per_day)], all.x=TRUE)
pred <- merge(pred, master_train[, .(productID, storeID, avg_sales_per_day)], all.x=TRUE)
master_test <- readRDS("master_test.RData")
master_train <- readRDS("master_train.RData")
pred <- master_test[,.(productID, storeID)]
pred1 <- merge(pred, master_train[, .(productID, storeID, avg_sales_per_day)], by = c("productID","storeID"), all.x=TRUE)
pred <- master_test[,.(productID, storeID)]
setkeyv(pred, c("productID", "storeID"))
setkeyv(master_train, c("productID", "storeID"))
pred <- merge(pred, master_train[, .(productID, storeID, avg_sales_per_day)], all.x=TRUE)
sum(is.na(pred[,avg_sales_per_day]))
setkeyv(pred, c("productID", "storeID"))
pred <- merge(pred, master_train[, .(productID, storeID, avg_sales_per_day)], all.x=TRUE)
View(pred)
sum(pred[,avg_sales_per_day.x]==pred[,avg_sales_per_day.y])
sum(pred[,avg_sales_per_day.x]==pred[,avg_sales_per_day.y], na.rm=TRUE)
sum(pred[,avg_sales_per_day.x]!=pred[,avg_sales_per_day.y], na.rm=TRUE)
sum(pred[,avg_sales_per_day.x]!=pred[,avg_sales_per_day.y])
library(data.table)
master_test <- readRDS("master_test.RData")
master_train <- readRDS("master_train.RData")
predict.basic <- function(master_test, master_train){
#create a pred table with the same size and same rows than master_test
pred <- master_test[,.(productID, storeID)]
#add the avg_sales_per_day to pred where they were present in master_train
setkeyv(pred, c("productID", "storeID"))
setkeyv(master_train, c("productID", "storeID"))
pred <- merge(pred, master_train[, .(productID, storeID, avg_sales_per_day)], all.x=TRUE)
#identify which product-store pairs are not present in master_train, but are in master_test
#these are the same pairs for which we could not find their match in the previous step
not_sold_in_training <- data.table(productID = pred[is.na(avg_sales_per_day), productID])
#for these 'not_sold_in_training' we provide the sales estimate based on average sales of the product in other stores
setkey(not_sold_in_training, productID)
master_train_avg_product <- master_train[,.(avg_sales_per_day = mean(avg_sales_per_day)), by =.(productID)]
not_sold_in_training <- not_sold_in_training[master_train_avg_product, nomatch=0] #this is an inner join, just with weird syntax
#we create the boolean variable 'present_in_train' to show this difference in estimation
pred <- data.frame(pred)
pred[is.na(pred$avg_sales_per_day), "present_in_train"] <- FALSE
pred[is.na(pred$present_in_train), "present_in_train"] <- TRUE
#final joining of the estimations
pred[is.na(pred$avg_sales_per_day), "avg_sales_per_day"] <- not_sold_in_training[,avg_sales_per_day]
return(pred)
}
#This function uses averages by product for prediction.
## the prediction for a product is the average of the product across all stores
predict.avg <- function(master_test, master_train){
pred <- master_test[,.(productID, storeID)]
master_train_avg_product <- master_train[,.(avg_sales_per_day = mean(avg_sales_per_day)), by =.(productID)]
pred <- pred[master_train_avg_product, nomatch=0]
pred <- data.frame(pred)
return(pred)
}
#Mean Square Error
mse <- function(master_test, prediction){
master_test <- data.frame(master_test)
sum((master_test$avg_sales_per_day - prediction$avg_sales_per_day)**2)/nrow(prediction)
}
#Mean Absolute Error
mae <- function(master_test, prediction){
master_test <- data.frame(master_test)
sum(abs(master_test$avg_sales_per_day - prediction$avg_sales_per_day))/nrow(prediction)
}
#Mean Error
me <- function(master_test, prediction){
master_test <- data.frame(master_test)
sum(master_test$avg_sales_per_day - prediction$avg_sales_per_day)/nrow(prediction)
}
prediction.basic <- predict.basic(master_test, master_train)
prediction.avg <- predict.avg(master_test, master_train)
prediction.basic <- predict.basic(master_test, master_train)
prediction.avg <- predict.avg(master_test, master_train)
plot.residuals(master_test, prediction.avg, "idComunidad")
plot.residuals <- function(master_test, prediction, xvalue, violin = FALSE, varwidth = FALSE){
master_test <- data.frame(master_test)
master_test$res <- master_test$avg_sales_per_day - prediction$avg_sales_per_day
limits <- sapply(split(master_test$res, master_test[,xvalue]),
function(x) boxplot.stats(x)$stats[c(1, 5)])
ylim1 = c(min(limits), max(limits))
p <- ggplot(master_test, aes_string(xvalue, "res")) +
coord_cartesian(ylim = ylim1*1.025) +
theme_bw() +
geom_hline(aes(yintercept=0), colour="#990000", linetype="dashed")
if(!violin & varwidth){
p <- p + geom_boxplot(varwidth = TRUE, outlier.size = 0)
}
if(!violin & !varwidth){
p <- p + geom_boxplot(varwidth = FALSE, outlier.size = 0)
}
if(violin & varwidth){
p <- p + geom_violin(scale = 'count')
}
if(violin & !varwidth){
p <- p + geom_violin()
}
p
}
plot.residuals(master_test, prediction.avg, "idComunidad")
library(ggplot2)
plot.residuals(master_test, prediction.avg, "idComunidad")
plot.residuals(master_test, prediction.avg, "idComunidad", varwidth = TRUE)
plot.residuals(master_test, prediction.avg, "idComunidad", violin = TRUE)
plot.residuals(master_test, prediction.avg, "idComunidad", violin = TRUE, varwidth = TRUE)
sales_by_month <- readRDS("sales_by_month.RData")
library(ggplot2)
plotsales <- function(pID, sID){
ggplot(sales_by_month[sales_by_month$productID==pID & sales_by_month$storeID==sID,], aes(x=month, y=quantity_sold_kg)) +
geom_line()
}
pID = sales_by_month$productID[200066]
sID = sales_by_month$storeID[500000]
plotsales(pID, sID)
