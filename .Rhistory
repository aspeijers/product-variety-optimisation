rlibs()
.rlibs()
.libPaths()
update.packages(ask = FALSE, repos = 'http://cran.rstudio.com/')
update.packages(ask = FALSE, repos = 'http://cran.rstudio.com/')
library("boot", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("methods", lib.loc="C:/Program Files/R/R-3.2.2/library")
.libPaths()
source('D:/Tanulas/Computing Lab/ps5.R')
cross.validation(mtcars$mpg, as.matrix(mtcars[2:10], 0.5, lasso.reg)
)
cross.validation(mtcars$mpg, as.matrix(mtcars[2:10]), 0.5, lasso.reg)
source('D:/Tanulas/Computing Lab/ps5.R')
cross.validation(mtcars$mpg, as.matrix(mtcars[2:10]), 0.5, lasso.reg)
source('D:/Tanulas/Computing Lab/ps5.R')
cross.validation(mtcars$mpg, as.matrix(mtcars[2:10]), 0.5, lasso.reg)
cross.validation(mtcars$mpg, as.matrix(mtcars[2:10]), 0.5, ridge.reg)
source('D:/Tanulas/Computing Lab/ps6.R')
y = mtcars$am
X=mtcars[,1:6]
X=as.matrix(mtcars[,1:6])
probit.iwls(y, X)
source('D:/Tanulas/Computing Lab/ps6.R')
probit.iwls(y, X)
max.iter <- 20
X          <- cbind(rep(1,length(y)),X)
X
beta       <- rep(0,ncol(X))
beta.prev  <- beta
eta        <- X %*% beta
mu         <- (y+0.5)/2
for( iter in 1:max.iter ){
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
eta  <- X %*% beta
mu   <- probit.mean( eta )
if( sum( (beta-beta.prev)**2 ) < 1e-4 ){
return( beta )
}
beta.prev <- beta
}
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
eta  <- X %*% beta
beta       <- rep(0,ncol(X))
beta.prev  <- beta
eta        <- X %*% beta
mu         <- (y+0.5)/2
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
eta  <- X %*% beta
mu   <- probit.mean( eta )
if( sum( (beta-beta.prev)**2 ) < 1e-4 ){
return( beta )
}
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
eta  <- X %*% beta
mu   <- probit.mean( eta )
if( sum( (beta-beta.prev)**2 ) < 1e-4 ){
return( beta )
}
beta.prev <- beta
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
mu   <- probit.mean( eta )
if( sum( (beta-beta.prev)**2 ) < 1e-4 ){
eta  <- X %*% beta
return( beta )
}
beta.prev <- beta
}
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
eta  <- X %*% beta
mu   <- probit.mean( eta )
if( sum( (beta-beta.prev)**2 ) < 1e-4 ){
return( beta )
}
beta.prev <- beta
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
eta  <- X %*% beta
mu   <- probit.mean( eta )
if( sum( (beta-beta.prev)**2 ) < 1e-4 ){
return( beta )
}
max.iter <- 20
beta       <- rep(0,ncol(X))
beta.prev  <- beta
eta        <- X %*% beta
mu         <- (y+0.5)/2
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
eta  <- X %*% beta
mu   <- probit.mean( eta )
if( sum( (beta-beta.prev)**2 ) < 1e-4 ){
return( beta )
}
beta.prev <- beta
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
eta  <- X %*% beta
mu   <- probit.mean( eta )
if( sum( (beta-beta.prev)**2 ) < 1e-4 ){
return( beta )
}
beta.prev <- beta
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
eta  <- X %*% beta
mu   <- probit.mean( eta )
if( sum( (beta-beta.prev)**2 ) < 1e-4 ){
return( beta )
}
beta.prev <- beta
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
eta  <- X %*% beta
mu   <- probit.mean( eta )
max.iter <- 20
# X          <- cbind(rep(1,length(y)),X)
beta       <- rep(0,ncol(X))
beta.prev  <- beta
eta        <- X %*% beta
mu         <- (y+0.5)/2
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
eta  <- X %*% beta
mu   <- probit.mean( eta )
beta.prev <- beta
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
eta  <- X %*% beta
mu   <- probit.mean( eta )
if( sum( (beta-beta.prev)**2 ) < 1e-4 ){
return( beta )
}
beta.prev <- beta
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
eta  <- X %*% beta
mu   <- probit.mean( eta )
if( sum( (beta-beta.prev)**2 ) < 1e-4 ){
return( beta )
}
beta.prev <- beta
z    <- eta + (y-mu)/probit.var(mu)
w    <- probit.var(mu)
W    <- diag( as.numeric(w) )
beta <- solve( t(X) %*% W %*% X , t(X) %*% W %*% z)
source('D:/Tanulas/Computing Lab/ps6.R')
probit.iwls(y,X)
load("D:/Tanulas/Computing Lab/Project/lyrics_data.RData")
lyrics[2345]
strsplit(lyrics[2345])
strsplit(lyrics[2345], ",")
lyrics2<-strsplit(lyrics, ",")
rm(lyrics2)
sapply(lyrics, strsplit, ",")
lyrics2<-sapply(lyrics, strsplit, ",")
head(lyrics2)
lyrics2[345]
lyrics2[5]
lyrics2[10]
require(devtools)
install_github("hadley/productplots")
require(devtools)
install.packages("devtools")
require(devtools)
install_github("hadley/productplots")
install.packages("curl")
install_github("hadley/productplots")
library(curl)
install.packages("curl")
library(curl)
install_github("hadley/productplots")
library(plyr)
library(ggplot2)
install.packages("ggplot2")
library(plyr)
library(ggplot2)
require(devtools)
library(curl)
install_github("hadley/productplots")
library(plyr)
library(ggplot2)
require(devtools)
library(curl)
install_github("hadley/productplots")
install_github("robjhyndman / forecast ")
install_github("robjhyndman/forecast")
library(plyr)
library(ggplot2)
require(devtools)
library(curl)
install_github("robjhyndman/forecast")
install_github("hadley/productplots")
install_github(c("rstudio/httpuv", "rstudio/shiny"))
average.path.length(erdos.renyi.game(5000, 0.01, "gnp"))
library(igraph)
average.path.length(erdos.renyi.game(5000, 0.01, "gnp"))
er01 <- erdos.renyi.game(5000, 0.01, "gnp")
er1 <- erdos.renyi.game(5000, 0.1, "gnp")
er25 <- erdos.renyi.game(5000, 0.25, "gnp")
er6 <- erdos.renyi.game(5000, 0.6, "gnp")
average.path.length(er01)
er_graphs <- c(er01, er1, er25, er6)
rm(er_graphs)
er_graphs <- c("er01", "er1", "er25", "er6")
average.path.length(er_graphs[1])
average.path.length(get(er_graphs[1]))
er_graphs <- data.frame(name = c("er01", "er1", "er25", "er6"),
p = c(0.01, 0.1, 0.25, 0.6))
View(er_graphs)
er_graphs$avg_distance <- average.path.length(get(er_graphs$name))
er_graphs$name
er_graphs <- data.frame(name = as.char(c("er01", "er1", "er25", "er6")),
p = c(0.01, 0.1, 0.25, 0.6))
er_graphs <- data.frame(name = as.character(c("er01", "er1", "er25", "er6")),
p = c(0.01, 0.1, 0.25, 0.6))
er_graphs <- data.frame(name = c("er01", "er1", "er25", "er6"),
p = c(0.01, 0.1, 0.25, 0.6), stringsAsFactors = FALSE)
er_graphs$avg_distance <- average.path.length(get(er_graphs$name))
View(er_graphs)
average.path.length(er1)
View(er_graphs)
er_graphs$name
get(er_graphs$name)
a <-get(er_graphs$name)
rm(a)
sapply(er_graphs$name, function(g) average.path.length(get(g)))
er_graphs$avg_distance <- sapply(er_graphs$name, function(g) average.path.length(get(g)))
er_graphs$diameter <- sapply(er_graphs$name, function(g) diameter(get(g)))
er_graphs$formula <- log(5000)/log(er_graphs$p)
er_graphs$formula <- log(5000)/log(er_graphs$p*4999)
clusters(er01)
clusters(er1)
clusters(er25)
clusters(er6)
no.clusters(er6)
er_graphs$no_of_components <- sapply(er_graphs$name, function(g) no.clusters(get(g)))
plot(degree.distribution(er01))
plot(degree.distribution(er1))
plot(degree.distribution(er25))
plot(degree.distribution(er6))
setwd("D:/Tanulas/thesis/product-variety-optimisation")
library(data.table)
master_test <- readRDS("master_test.RData")
master_train <- readRDS("master_train.RData")
predict.basic <- function(master_test, master_train){
pred <- master_test[,.(productID, storeID)]
setkeyv(pred, c("productID", "storeID"))
setkeyv(master_train, c("productID", "storeID"))
pred <- merge(pred, master_train[, .(productID, storeID, avg_sales_per_day)], all.x=TRUE)
not_sold_in_training <- data.table(productID = pred[is.na(avg_sales_per_day), productID])
setkey(not_sold_in_training, productID)
master_train_avg_product <- master_train[,.(avg_sales_per_day = mean(avg_sales_per_day)), by =.(productID)]
not_sold_in_training <- not_sold_in_training[master_train_avg_product, nomatch=0]
pred <- data.frame(pred)
pred[is.na(pred$avg_sales_per_day), "present_in_train"] <- FALSE
pred[is.na(pred$present_in_train), "present_in_train"] <- TRUE
pred[is.na(pred$avg_sales_per_day), "avg_sales_per_day"] <- not_sold_in_training[,avg_sales_per_day]
return(pred)
}
prediction.avg <- predict.avg(master_test, master_train)
predict.avg <- function(master_test, master_train){
pred <- master_test[,.(productID, storeID)]
master_train_avg_product <- master_train[,.(avg_sales_per_day = mean(avg_sales_per_day)), by =.(productID)]
pred <- pred[master_train_avg_product, nomatch=0]
pred <- data.frame(pred)
return(pred)
}
prediction.avg <- predict.avg(master_test, master_train)
prediction.basic <- predict.basic(master_test, master_train)
