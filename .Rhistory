x = (1,2)
x <- (1,2)
x <- c(1,2)
2^10
?.Machine
.Machine
my.first.app <- function(){"Hello World!"}
my.first.app()
type(my.first.app())
class(my.first.app())
my.first.app <- function{"Hello World!"}
my.first.app <- function(){Hello World!}
pareto.simulator <- function(rdraws, alpha){
paretodraw <- (1-rdraws)**(-1/alpha)
}
pareto.simulator(runif(100), 2)
s<-pareto.simulator(runif(100), 2)
hist(pareto.simulator(runif(100), 2))
hist(pareto.simulator(runif(1000), 2))
hist(pareto.simulator(runif(1000), 5))
var(c(2,5,7))
var(c(4,10,14))
var(c(2,5,7))/5
var(c(4,10,14))/10
var(c(2,5,7))/25
var(c(4,10,14))/100
sd(c(3,5,7))
sd(c(6,10,14))
sd(c(3,5,7))/5
sd(c(6,10,14))/10
library("foreign", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
PFpackages <- c('biglm', 'ffbase', 'ggplot2', 'sgd')
install.packages(PFpackages, repos = 'http://cran.rstudio.com/')# ffbase Provides support for data.frame like objects that connect to
require(ffbase)
require(biglm)
# ggplot2 is for flexible plotting
require(ggplot2)
# sgd is for stochastic gradient descent methods
require(sgd)
install.packages("ggplot2")
install.packages("plyr")
load("/media/balint/Storage/Tanulas/Computing Lab/Project/lyrics_data.RData")
lyrics[56777]
library(mvtnorm)
# create small wrapper functions
sigmaXY <- function(rho, sdX, sdY) {
covTerm <- rho * sdX * sdY
VCmatrix <- matrix(c(sdX^2, covTerm, covTerm, sdY^2),
2, 2, byrow = TRUE)
return(VCmatrix)
}
genBVN <- function(n = 1, seed = NA, muXY=c(0,1), sigmaXY=diag(2)) {
if(!is.na(seed)) set.seed(seed)
rdraws <- rmvnorm(n, mean = muXY, sigma = sigmaXY)
return(rdraws)
}
# creating a function for all of this
loanData <- function(noApproved, noDenied, noUndecided,
muApproved, muDenied, muUndecided,
sdApproved, sdDenied, sdUndecided,
rhoApproved, rhoDenied, rhoUndecided, seed=1111) {
sigmaApproved <- sigmaXY(rho=rhoApproved, sdX=sdApproved[1], sdY=sdApproved[2])
sigmaDenied <- sigmaXY(rho=rhoDenied, sdX=sdDenied[1], sdY=sdDenied[2])
sigmaUndecided <- sigmaXY(rho=rhoUndecided, sdX=sdUndecided[1], sdY=sdUndecided[2])
approved <- genBVN(noApproved, muApproved, sigmaApproved, seed = seed)
denied <- genBVN(noDenied, muDenied, sigmaDenied, seed = seed+1)
undecided <- genBVN(noUndecided, muUndecided, sigmaUndecided, seed = seed+1)
loanDf <- as.data.frame(rbind(approved,denied,undecided))
deny <- c(rep("Approved", noApproved), rep("Denied", noDenied), rep("Undecided", noUndecided))
targetApproved = c(rep(1, noApproved), rep(0, noDenied), rep(0, noUndecided))
targetDenied = c(rep(0, noApproved), rep(1, noDenied), rep(0, noUndecided))
targetUndecided = c(rep(0, noApproved), rep(0, noDenied), rep(1, noUndecided))
loanDf <- data.frame(loanDf, deny, targetApproved, targetDenied, targetUndecided)
colnames(loanDf) <- c("PIratio", "solvency", "deny", "targetApproved", "targetDenied", "targetUndecided")
return(loanDf)
}
loanDf <- loanData(noApproved=50, noDenied=50, noUndecided=25,
c(4, 150), c(10, 100), c(8, 160),
c(1,20), c(2,30), c(2, 10), -0.1, 0.6, 0.2, 1221)
# analytical solution
X <- as.matrix(cbind(ind=rep(1, nrow(loanDf)),
loanDf[,c("PIratio", "solvency")]))
Y <- as.matrix(loanDf[,c("targetApproved", "targetDenied", "targetUndecided")])
weightsOptim <- solve(t(X)%*%X) %*% t(X) %*% Y
# compute predictions
predictions <- data.frame(X %*% weightsOptim)
names(predictions) <- c("predictionApproved", "predictionDenied", "predictionUndecided")
loanDf <- cbind(loanDf, predictions)
# classify according to the argmax criterion
loanDf$predictedLabels[loanDf$predictionApproved > loanDf$predictionDenied
& loanDf$predictionApproved > loanDf$predictionUndecided] <- "Approved"
loanDf$predictedLabels[loanDf$predictionDenied > loanDf$predictionApproved
& loanDf$predictionDenied > loanDf$predictionUndecided] <- "Denied"
loanDf$predictedLabels[loanDf$predictionUndecided > loanDf$predictionApproved
& loanDf$predictionUndecided > loanDf$predictionDenied] <- "Undecided"
# classification algorithm performance
table(loanDf$deny, loanDf$predictedLabels)
library(ggplot2)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio, colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PIratio") +
theme_bw() +
theme(text=element_text(family="Arial")) +
geom_line(data=(c(,)))
ggplot(data = loanDf,
aes(x = solvency, y = PIratio, colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PIratio") +
theme_bw() +
theme(text=element_text(family="Arial"))
View(weightsOptim)
View(X)
View(Y)
View(predictions)
View(weightsOptim)
b <- -weightsOptim[1,]
rep(1, 3)
A <- rbind(rep(1, 3), weightsOptim[1,])
View(A)
A <- rbind(rep(1, 3), weightsOptim[-1,])
View(A)
A <- rbind(rep(-1, 3), weightsOptim[-1,])
View(A)
solve(A, b)
A <- t(rbind(rep(-1, 3), weightsOptim[-1,]))
solve(A, b)
intersection <- solve(A, b)
View(loanDf)
lowpiont <- 0.9*min(loanDf$solvency)
lowsolvency <- 0.9*min(loanDf$solvency)
highsolvency <- 1.1*max(loanDf$solvency)
PIratio_ontheline <- function(solvency, weights1, weights2){
Pratio <- ((weights1$solvency-weights2$solvency)+weights1$ind-weights2$ind)/(weights2$PIratio-weights1$PIratio)
}
weightsOptim$targetApproved
weightsOptim[,"targetApproved"]
PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
w<-weightsOptim[,"targetApproved"]
w["solvency"]
PIratio_ontheline <- function(solvency, weights1, weights2){
Pratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"]/(weights2["PIratio"]-weights1["PIratio"])
}
PIratio_ontheline <- function(solvency, weights1, weights2){
Pratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"])/(weights2["PIratio"]-weights1["PIratio"])
}
PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
bh<-PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
bh
PIratio_ontheline <- function(solvency, weights1, weights2){
PIratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"])/(weights2["PIratio"]-weights1["PIratio"])
return PIratio
}
PIratio_ontheline <- function(solvency, weights1, weights2){
PIratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"])/(weights2["PIratio"]-weights1["PIratio"])
return PIratio
PIratio_ontheline <- function(solvency, weights1, weights2){
PIratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"])/(weights2["PIratio"]-weights1["PIratio"])
}
PIratio_ontheline <- function(solvency, weights1, weights2){
piratio <- ((weights1["solvency"]-weights2["solvency"])+weights1["ind"]-weights2["ind"])/(weights2["PIratio"]-weights1["PIratio"])
}
bh<-PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
View(loanDf)
pilowsolvAD <- PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
pilowsolvAU <- PIratio_ontheline(lowsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetUndecided"])
pilowsolvDU <- PIratio_ontheline(lowsolvency, weightsOptim[,"targetDenied"], weightsOptim[,"targetUndecided"])
pihighsolvAD <- PIratio_ontheline(highsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetDenied"])
pihighsolvAU <- PIratio_ontheline(highsolvency, weightsOptim[,"targetApproved"], weightsOptim[,"targetUndecided"])
pihighsolvDU <- PIratio_ontheline(highsolvency, weightsOptim[,"targetDenied"], weightsOptim[,"targetUndecided"])
pilowsolvAD
intersection
intersection["PIratio"]
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD) )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD) )
}
prediction <- function(solvency, PIratio, weights){
r <- weights["ind"]+weights["solvency"]*solvency+weights["PIratio"]*PIratio
}
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD) )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD) )
}
library(ggplot2)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio, colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PIratio") +
theme_bw() +
theme(text=element_text(family="Arial")) +
geom_line(data=boundaryDf1)
View(loanDf)
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD), deny=rep(2, "boundaryAD") )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD), deny=rep(2, "boundaryAD") )
}
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD), deny=rep(2, "boundaryAD") )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD), deny=rep(2, "boundaryAD") )
}
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD), deny=rep("boundaryAD",2) )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD), deny=rep("boundaryAD",2) )
}
library(ggplot2)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio, colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PIratio") +
theme_bw() +
theme(text=element_text(family="Arial")) +
geom_line(data=boundaryDf1)
if( prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAD, weightsOptim[,"targetUndecided"])){
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAD), deny=rep("boundaryAD",2) )
} else {
boundaryDf1 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAD), deny=rep("boundaryAD",2) )
}
if( prediction(lowsolvency, pilowsolvAU, weightsOptim[,"targetApproved"]) > prediction(lowsolvency, pilowsolvAU, weightsOptim[,"targetDenied"])){
boundaryDf2 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvAU), deny=rep("boundaryAU",2) )
} else {
boundaryDf2 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvAU), deny=rep("boundaryAU",2) )
}
if( prediction(lowsolvency, pilowsolvDU, weightsOptim[,"targetDenied"]) > prediction(lowsolvency, pilowsolvDU, weightsOptim[,"targetApproved"])){
boundaryDf3 <- data.frame(solvency=c(intersection["solvency"], lowsolvency), PIratio=c(intersection["PIratio"], pilowsolvDU), deny=rep("boundaryDU",2) )
} else {
boundaryDf3 <- data.frame(solvency=c(intersection["solvency"], highsolvency), PIratio=c(intersection["PIratio"], pihighsolvDU), deny=rep("boundaryDU",2) )
}
library(ggplot2)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio, colour=deny, fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PIratio") +
theme_bw() +
theme(text=element_text(family="Arial")) +
geom_line(data=boundaryDf1) +
geom_line(data=boundaryDf2) +
geom_line(data=boundaryDf3)
table(loanDf$deny, loanDf$predictedLabels)
lowPIratio <- 0.9*min(loanDf$PIratio)
highPIratio <- 1.1*max(loanDf$PIratio)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
source('/media/balint/Storage/Tanulas/Advanced_Computational_Methods/loanData3C.R', echo=TRUE)
install.packages("fractal")
install.packages("car")
library(car)
library(fractal)
library(tseries)
if (!require('devtools')) install.packages('devtools')
devtools::install_github("abarciauskas-bgse/bplmnist")
library(bplmnist)
library(randomForest)
?randomForest
?cable
?kable
library(knitr)
?kable
require(devtools)
install_github("hadley/productplots")
?prodplot
library(productplots)
?prodplot
library(ggplot2)
prodplot(happy, ~ happy, "hbar")
prodplot(happy, ~ sex + happy, c("vspine", "hbar"))
prodplot(happy, ~ sex + happy, stacked())
prodplot(happy, ~ happy + sex, c("hbar", "hbar"))
prodplot(happy, ~ happy + sex + health, c("hbar", "fluct"))
shiny::runApp('/media/balint/Storage/Tanulas/Data_Visualization/project/dv_shiny')
shiny::runApp('/media/balint/Storage/Tanulas/Data_Visualization/project/dv_shiny')
shiny::runApp('/media/balint/Storage/Tanulas/Data_Visualization/project/dv_shiny')
shiny::runApp('/media/balint/Storage/Tanulas/Data_Visualization/project/dv_shiny')
shiny::runApp('/media/balint/Storage/Tanulas/Data_Visualization/project/dv_shiny')
names(adat)
table(adat[,23])
adat <- adat[!is.na(adat[,117]), ]
table(adat[,23])
table(adat$X16.gyerekkor.orszag)
library(ggplot2)
library(plyr)
library(data.table)
library(igraph)
barabasi.game(n=4, m=4)
barabasi.game(n=10, m=4)
graph.full(4)
barabasi.game(n=10, m=4, start.graph = graph.full(4))
graph.full(4)
barabasi.game(n=10, m=4, directed = FALSE, start.graph = graph.full(4))
degree_distribution(bg100)
bg100 <- barabasi.game(n=100, m=4, directed = FALSE, start.graph = graph.full(4))
degree_distribution(bg100)
plot(degree.distribution(bg100))
plot(degree.distribution(bg1000))
bg100 <- barabasi.game(n=100, m=4, directed = FALSE, start.graph = graph.full(4))
bg1000 <- barabasi.game(n=1000, m=4, directed = FALSE, start.graph = graph.full(4))
bg10000 <- barabasi.game(n=10000, m=4, directed = FALSE, start.graph = graph.full(4))
plot(degree.distribution(bg100))
plot(degree.distribution(bg1000))
plot(degree.distribution(bg10000))
set.seed(1234)
bg100 <- barabasi.game(n=100, m=4, directed = FALSE, start.graph = graph.full(4))
set.seed(1234)
bg1000 <- barabasi.game(n=1000, m=4, directed = FALSE, start.graph = graph.full(4))
set.seed(1234)
bg10000 <- barabasi.game(n=10000, m=4, directed = FALSE, start.graph = graph.full(4))
plot(degree.distribution(bg100))
plot(degree.distribution(bg1000))
plot(degree.distribution(bg10000))
plot(degree.distribution(bg100), type="line")
line(degree.distribution(bg1000))
lines(degree.distribution(bg1000))
lines(degree.distribution(bg1000), col="red")
plot(degree.distribution(bg100), type="line", col="green")
lines(degree.distribution(bg1000), col="red")
lines(degree.distribution(bg10000), col="blue")
degree.distribution(bg100)
degree.distribution(bg100)[-1:4]
degree.distribution(bg100)[-1]
degree.distribution(bg100)[-c(1:4)]
plot(degree.distribution(bg100)[-c(1:4)], type="line", col="green")
lines(degree.distribution(bg1000)[-c(1:4)], col="red")
lines(degree.distribution(bg10000)[-c(1:4)], col="blue")
power.law.fit(bg100)
power.law.fit(degree.distribution(bg100))
power.law.fit(degree.distribution(bg100)[-c(1:4)])
power.law.fit(degree.distribution(bg1000))
power.law.fit(degree.distribution(bg10000))
power.law.fit(degree.distribution(bg100))$alpha
plot(degree.distribution(bg100, cumulative = TRUE), type="line", col="green")
lines(degree.distribution(bg1000, cumulative = TRUE), col="red")
lines(degree.distribution(bg10000, cumulative = TRUE), col="blue")
plot(degree.distribution(bg100, cumulative = TRUE)[-c(1:4)], type="line", col="green")
lines(degree.distribution(bg1000, cumulative = TRUE)[-c(1:4)], col="red")
lines(degree.distribution(bg10000, cumulative = TRUE)[-c(1:4)], col="blue")
transitivity(bg100)
cc <- NA
for(i in 4:100){
set.seed(1234)
bg <- barabasi.game(n=i, m=4, directed = FALSE, start.graph = graph.full(4))
cc[i-3] <- transitivity(bg)
}
for(i in 4:10000){
set.seed(1234)
bg <- barabasi.game(n=i, m=4, directed = FALSE, start.graph = graph.full(4))
cc[i-3] <- transitivity(bg)
}
plot(cc, type="line")
degree(bg100)
degree(bg100, 4)
d100 <- NA
d1000 <- NA
d5000 <- NA
degree(bg100, 4)
d100[34] <-2
degree(bg100, 345)
cc <- NA
d100 <- NA
d1000 <- NA
d5000 <- NA
for(i in 4:10000){
set.seed(1234)
bg <- barabasi.game(n=i, m=4, directed = FALSE, start.graph = graph.full(4))
if(i>=100){
d100[i] <- degree(bg, 100)
}
if(i>=1000){
d1000[i] <- degree(bg, 1000)
}
if(i>=5000){
d5000[i] <- degree(bg, 5000)
}
cc[i-3] <- transitivity(bg)
}
plot(cc, type="line")
```
plot(d100, type="line", col="green")
lines(d1000, col="red")
lines(d5000, col="blue")
library(igraph)
er1 <- erdos.renyi.game(20, 0.4, "gnp")
er2 <- erdos.renyi.game(20, 0.4, "gnp")
summary(er1)
eru <- er1 %u% er2
summary(eru)
eru <- union(er1, er2, byname = FALSE)
summary(eru)
eru <- union(er1, er2, byname = TRUE)
eru <- graph.disjoint.union(er1, er2,)
eru <- graph.disjoint.union(er1, er2)
summary(eru)
summary(er1)
summary(er2)
library(igraph)
er1 <- erdos.renyi.game(20, 0.4, "gnp")
er2 <- erdos.renyi.game(20, 0.4, "gnp")
er1[[1]]
er1[[2]]
er1[[3]]
vcount(eru)
vcount(er2)
eru <- graph.disjoint.union(er1, er2)
summary(eru)
plot(eru)
eru <- rewire(each_edge(p = 15/vcount(eru)))
eru <- rewire(each_edge(p = 15/vcount(eru), loops = FALSE))
eru <- rewire(eru, each_edge(p = 15/vcount(eru)))
plot(eru)
each_edge(p = 15/vcount(eru))
15/vcount(eru)
---
setwd("/media/balint/Storage/Tanulas/thesis/product-variety-optimisation")
jpeg("sr_hist.jpg", height = 600, width = 600)
did1b <- readRDS("did1b.RData")
hist(did1b$salesratio, main = "Sales ratio distribution", breaks = 24, xlab ="", cex.main =2)
abline(v = 1, col = "red", lwd = 2)
dev.off()
jpeg("sr_hist.jpg", height = 600, width = 600)
did1b <- readRDS("did1b.RData")
hist(did1b$salesratio, main = "Sell-in ratio distribution", breaks = 24, xlab ="", cex.main =2)
abline(v = 1, col = "red", lwd = 2)
dev.off()
